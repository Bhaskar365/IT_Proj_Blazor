@page "/"

@using ClosedXML.Excel
@using Newtonsoft.Json;
@using IT_Inventory_Project.Data
@using System.Data

@inject HttpClient Http
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<div class="container p-1 mt-2">

    <h6>IT Inventory Management</h6>
    <hr />

    <div class="buttonTable">
       <div class="excelImg" >
           <button type="button" class="btn btn-primary" @onclick="GoToAddForm">Add New</button>
           &nbsp;<img src="excel.png" alt="img" @onclick="Export" />
            <input type="text" class="form-control" placeholder="Search user by owner only"
                   @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
       </div>

        <table class="table-bordered">
            <thead>
                <tr>
                    <th><button @onclick='(e) => SortBy("DevId")'></button>ID</th>
                <th><button @onclick='(e) => SortBy("DevType")'>2</button>Product Name</th>
                <th><button @onclick='(e) => SortBy("Owner")'>3</button>Owner Name</th>
                <th><button @onclick='(e) => SortBy("Location")'>4</button>Location</th>
                <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (paginationTableData != null)
                {
                    @foreach (var item in paginationTableData)
                    {
                        <tr>
                            <td>@item.DevId</td>
                            <td>@item.DevType</td>
                            <td>@item.Owner</td>
                            <td>@item.Location</td>
                            <td id="iconsID">
                                <i class="fa fa-eye" aria-hidden="true"></i> | 
                                <i class="fa fa-trash" aria-hidden="true"></i> |
                                <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                            </td>
                        </tr>
                    }
                }
            </tbody>
       </table> 
        <div class="pagination">
            <button class="btn btn-link" disabled="@IsFirstPage" @onclick="PreviousPage">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button class="btn btn-link" disabled="@IsLastPage" @onclick="NextPage">Next</button>
        </div>
   </div>
</div>

@code
{
    private string term = "";
    private string orderBy = "";

    List<Device_GetAll> GetAll = new List<Device_GetAll>();

    private List<Device_GetAll> paginationTableData = new List<Device_GetAll>();
    private int pageSize = 2; 
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)GetAll.Count / pageSize);
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    protected string SearchString { get; set; } = string.Empty;

    public string? DeviceId;
    public bool Show = false;

    public async Task Export() 
    {
        try
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("DevId", typeof(string));
            dt.Columns.Add("DevType", typeof(string));
            dt.Columns.Add("Owner", typeof(string));
            dt.Columns.Add("Location", typeof(string));
            var data = GetAll;
            if (data != null && data.Count > 0)
            {
                data.ForEach(item =>
                {
                    dt.Rows.Add(item.DevId, item.DevType, item.Owner, item.Location);
                });
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Details");
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    var byteArray = stream.ToArray();

                    // Download the Excel file
                    await JSRuntime.InvokeAsync<object>("BlazorDownloadFile",
                        "Customer.xlsx", Convert.ToBase64String(byteArray));
                }
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    public void ClosePopUp()
    {
        Show = false;
    }

    public void showDelete(string DevId) 
    {
        DeviceId = DevId;
        Show = true;
    }

    public async Task Confirmation(bool value) 
    {
        Show = false;
        var tokenKey = new[]
        {
             new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521"),
            new KeyValuePair<string,string>("DevId",DeviceId.ToString())
    };

        string deleteUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_Del";

        var httpResponse = await Http.PostAsync(deleteUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode) 
        {
            InventoryAPIResponse inventoryAPIResponseData = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());

            await Task.Run(() => JSRuntime.InvokeVoidAsync("alert", $"'{inventoryAPIResponseData.Msg}','{inventoryAPIResponseData.Total}'"));
            navigation.NavigateTo("/", true);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
    }

    public async Task GetAllData()
    {
        var tokenKey = new[]
       {
                new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521")

    };

        string Device_AddUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_GetAll";
        var httpResponse = await Http.PostAsync(Device_AddUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse AddDataResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            GetAll = JsonConvert.DeserializeObject<List<Device_GetAll>>(AddDataResponse.Data);
            UpdatePagedData();
        }
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            GetAll = GetAll.Where(x => x.Owner.ToLower().IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
            //GetAll = searchUserData.Where(x => x.Location.ToLower().IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else 
        {
            UpdatePagedData();
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        UpdatePagedData();
    }

    public void GoToAddForm()
    {
        navigation.NavigateTo("addProductForm");
    }

    private void UpdatePagedData()
    {
        int startIndex = (currentPage - 1) * pageSize;
        paginationTableData = GetAll.Skip(startIndex).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdatePagedData();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdatePagedData();
        }
    }
    private void SortBy(string column)
    {
        if (orderBy == column)
        {
            GetAll.Reverse();
        }
        else
        {
            orderBy = column;
            switch (column)
            {
                case "DevId":
                    GetAll = GetAll.OrderBy(x => x.DevId).ToList();
                    break;
                case "DevType":
                    GetAll = GetAll.OrderBy(x => x.DevType).ToList();
                    break;
                case "Owner":
                    GetAll = GetAll.OrderBy(x => x.Owner).ToList();
                    break;
                case "Location":
                    GetAll = GetAll.OrderBy(x => x.Location).ToList();
                    break;
            }
        }

        UpdatePagedData();
    }
}


}