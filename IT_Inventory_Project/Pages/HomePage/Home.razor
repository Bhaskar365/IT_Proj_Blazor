@page "/"
@using ClosedXML.Excel
@using Newtonsoft.Json;
@using IT_Inventory_Project.Data
@using System.Data

@inject HttpClient Http
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<div class="container">

    <h6>IT Inventory Management</h6>
    <hr />

    <div class="buttonTable">
        <div class="iconContainer">
            <button type="button" id="addFormBtn" @onclick="GoToAddForm">
                <i class="fa fa-user-plus" aria-hidden="true"></i>
            </button>
            &nbsp;<button id="excelBtn"><img src="excel.png" alt="img" @onclick="Export" id="excelIcon" /></button>
        </div>
        <input type="text" class="form-control" placeholder="Search user by owner only"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />

    </div>

    <div class="table-responsive">
        <table class="table table-bordered max-width-table">
            <thead class="table-primary">
                <tr>
                    <th @onclick='(e) => SortBy("DevId")'>
                        @{
                            if (sortColumn == "DevId" && sortOrder == "asc")
                            {
                                <i class="fa fa-arrow-up" aria-hidden="true"></i>
                            }
                            else
                            {
                                <i class="fa fa-arrow-down" aria-hidden="true"></i>
                            }
                        }
                        ID
                    </th>
                    <th @onclick='(e) => SortBy("DevType")'>
                        @{
                            if (sortColumn == "DevType" && sortOrder == "asc")
                            {
                                <i class="fa fa-arrow-up" aria-hidden="true"></i>
                            }
                            else
                            {
                                <i class="fa fa-arrow-down" aria-hidden="true"></i>
                            }
                        }
                        Product
                    </th>
                    <th @onclick='(e) => SortBy("Owner")'>
                        @{
                            if (sortColumn == "Owner" && sortOrder == "asc")
                            {
                                <i class="fa fa-arrow-up" aria-label="true"></i>
                            }
                            else
                            {
                                <i class="fa fa-arrow-down" aria-label="true"></i>
                            }
                        }
                        Owner
                    </th>
                    <th @onclick='(e) => SortBy("Location")'>
                        @{
                            if (sortColumn == "Location" && sortOrder == "asc")
                            {
                                <i class="fa fa-arrow-up" aria-label="true"></i>
                            }
                            else
                            {
                                <i class="fa fa-arrow-up" aria-label="true"></i>
                            }
                        }
                        Location
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                @if (paginationTableData != null)
                {
                    @foreach (var item in paginationTableData)
                    {
                        <tr>
                            <td>@item.DevId</td>
                            <td>@item.DevType</td>
                            <td>@item.Owner</td>
                            <td>@item.Location</td>
                            <td id="iconsID">
                                <button id="viewBtn" @onclick="EventCallback.Factory.Create(this, () => GoToViewPage(item.DevId))">
                                    <i class="fa fa-eye" aria-hidden="true"></i>
                                </button>
                                <button id="editBtn" @onclick="EventCallback.Factory.Create(this, ()=>GoToEditPage(item.DevId))">
                                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                                </button>
                                <button id="deleteBtn" type="button" data-bs-toggle="modal" 
                                        data-bs-target="#exampleModal" @onclick="@(()=>ShowDelete(item.DevId))">
                                    <i class="fa fa-trash" aria-hidden="true" ></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-----pagination----->
   @* <Pagination CurrentPage="@currentPage" NextPage="NextPage" PreviousPage="PreviousPage"
                TotalPages="@totalPages" UpdatePageSize="UpdatePageSize"></Pagination>  *@
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you want to delete product with ID : @DeviceId permanently?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="ClosePopUp">Close</button>
                <button type="button" class="btn btn-danger" @onclick="(()=>DeleteConfirmation(true))">Delete</button>
            </div>
        </div>
    </div>
</div>

@code
{
    private string orderBy = "";

    private string sortColumn = "DevId";
    private string sortOrder = "asc";

    List<Device_GetAll> GetAll = new List<Device_GetAll>();

    private List<Device_GetAll> paginationTableData = new List<Device_GetAll>();
    private int pageSize = 2;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)GetAll.Count / pageSize);
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    protected string SearchString { get; set; } = string.Empty;

    public string? DeviceId;
    public bool Show = false;

    public async Task Export()
    {
        try
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("DevId", typeof(string));
            dt.Columns.Add("DevType", typeof(string));
            dt.Columns.Add("Owner", typeof(string));
            dt.Columns.Add("Location", typeof(string));
            var data = GetAll;
            if (data != null && data.Count > 0)
            {
                data.ForEach(item =>
                {
                    dt.Rows.Add(item.DevId, item.DevType, item.Owner, item.Location);
                });
            }
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt, "Details");
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    var byteArray = stream.ToArray();

                    // Download the Excel file
                    await JSRuntime.InvokeAsync<object>("BlazorDownloadFile",
                        "Customer.xlsx", Convert.ToBase64String(byteArray));
                }
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    public void ClosePopUp()
    {
        Show = false;
    }

    public void ShowDelete(string DevId)
    {
        DeviceId = DevId;
        Show = true;
    }

    public async Task DeleteConfirmation(bool value)
    {

        Show = false;
        var tokenKey = new[]
        {
             new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521"),
            new KeyValuePair<string,string>("DevId",DeviceId.ToString())
    };

        string deleteUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_Del";

        var httpResponse = await Http.PostAsync(deleteUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse inventoryAPIResponseData = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());

            await Task.Run(() => JSRuntime.InvokeVoidAsync("alert", $"'{inventoryAPIResponseData.Msg}','{inventoryAPIResponseData.Total}'"));
            navigation.NavigateTo("/", true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
    }

    public async Task GetAllData()
    {
        var tokenKey = new[]
        {
                new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521")

        };

        string Device_AddUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_GetAll";
        var httpResponse = await Http.PostAsync(Device_AddUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse AddDataResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            GetAll = JsonConvert.DeserializeObject<List<Device_GetAll>>(AddDataResponse.Data);
            UpdatePagedData();
        }
    }

    protected async Task FilterUser()
    {
        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            GetAll = GetAll.Where(x => x.Owner.ToLower().Contains(SearchString.ToLower()) || 
                                       x.DevType.ToLower().Contains(SearchString.ToLower()) ||
                                       x.Location.ToLower().Contains(SearchString.ToLower())
                               ).ToList();
             //UpdatePagedData();
            paginationTableData = GetAll;
        }
        else
        {
            await GetAllData();
        }
    }

    public async Task GoToViewPage(string DeviceId)
    {
        string viewPageUrl = $"/view/{DeviceId}";
        navigation.NavigateTo(viewPageUrl);
    }

    public async Task GoToEditPage(string DevId)
    {
        navigation.NavigateTo($"/product/{DevId}");
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        UpdatePagedData();
    }

    public void GoToAddForm()
    {
        navigation.NavigateTo("addProductForm");
    }

    private List<Device_GetAll> sortedTableData = new List<Device_GetAll>();

    private void UpdatePagedData()
    {
        int startIndex = (currentPage - 1) * pageSize;
        paginationTableData = GetAll.Skip(startIndex).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdatePagedData();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdatePagedData();
        }
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortOrder = sortOrder == "asc" ? "desc" : "asc";
        }
        else
        {
            sortColumn = column;
            sortOrder = "asc";
        }

        if (orderBy == column)
        {
            GetAll.Reverse();
        }
        else
        {
            orderBy = column;
            switch (column)
            {
                case "DevId":
                    GetAll = sortOrder == "asc" ?
                        GetAll.OrderBy(x => int.Parse(x.DevId))
                            .ThenBy(x => x.DevType)
                            .ThenBy(x => x.Owner)
                            .ThenBy(x => x.Location)
                            .ToList() :
                        GetAll.OrderByDescending(x => int.Parse(x.DevId))
                            .ThenByDescending(x => x.DevType)
                            .ThenByDescending(x => x.Owner)
                            .ThenByDescending(x => x.Location)
                            .ToList();
                    break;
                    

                case "DevType":
                    GetAll = GetAll.OrderBy(x => x.DevType).ToList();
                    break;
                case "Owner":
                    GetAll = GetAll.OrderBy(x => x.Owner).ToList();
                    break;
                case "Location":
                    GetAll = GetAll.OrderBy(x => x.Location).ToList();
                    break;
            }
        }

        UpdatePagedData();
    }

    private void UpdatePageSize(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        // Reset to first page
        currentPage = 1;
        UpdatePagedData();
    }
}