@page "/bargraph"
@using IT_Inventory_Project.Data
@using MudBlazor
@using Newtonsoft.Json
@using System.Collections
@inject HttpClient Http;

<MudPaper Class="pa-4">
        <MudChip Color="Color.Info">Laptop : @laptop_desktop</MudChip>
        <MudChip Color="Color.Success">Server : @server</MudChip>
        <MudChip Color="Color.Tertiary">Misc : @misc</MudChip>
        <MudChip Color="Color.Secondary">Polycom : @polycom</MudChip>
        <MudChip Color="Color.Warning" >Phone : @phone</MudChip>
        <MudChip Color="Color.Error" Style="background-color:#ff6f00">Monitor : @monitor</MudChip>
        <MudChip Color="Color.Primary">Printer : @printer</MudChip>

        <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@labels" Width="100%" Height="350px">
    </MudChart>

</MudPaper>

    @code {

    public List<Device_GetAll> GetAll = new List<Device_GetAll>();

    public async Task GetAllData()
    {
        var tokenKey = new[]
        {
                    new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521")
        };

        string Device_AddUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_GetAll";
        var httpResponse = await Http.PostAsync(Device_AddUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse AddDataResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            GetAll = JsonConvert.DeserializeObject<List<Device_GetAll>>(AddDataResponse.Data);
        }
    }

    public double server = 0;
    public double misc = 0;
    public double polycom = 0;
    public double laptop_desktop = 0;
    public double phone = 0;
    public double monitor = 0;
    public double printer = 0;

    private int Index = -1;
    public string[] labels = { "Laptop/Desktop", "Misc", "Mobile/Phone", "Monitor", "Polycom", "Printer", "Server" };

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
        await GetChartDetails();

        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Laptop/Desktop", Data = new double[] { 0,laptop_desktop,0 } },
            new ChartSeries() { Name = "Misc", Data = new double[] { 0,misc } },
            new ChartSeries() { Name = "Mobile/Phone", Data = new double[] { 0,0,phone } },
            new ChartSeries() { Name = "Monitor", Data = new double[] { 0,0,0,monitor } },
            new ChartSeries() { Name = "Polycom", Data = new double[] { 0,0,0,polycom,0 } },
            new ChartSeries() { Name = "Printer", Data = new double[] { 0,0,0,0,printer,0, } },
            new ChartSeries() { Name = "Server", Data = new double[] { 0,0,0,0,0,server,0 } },
        };
    }

    public List<ChartSeries> Series = new List<ChartSeries>();

    // Initialize counts for laptop, server, misc, polycom
    public async Task GetChartDetails()
    {
        foreach (var x in GetAll)
        {
            if (x.DevType == "Laptop/Desktop")
            {
                this.laptop_desktop++;
            }
            else if (x.DevType == "Misc")
            {
                this.misc++;
            }
            else if (x.DevType == "Mobile/Phone")
            {
                this.phone++;
            }
            else if (x.DevType == "Monitor")
            {
                this.monitor++;
            }
            else if (x.DevType == "Polycom")
            {
                this.polycom++;
            }
            else if (x.DevType == "Printer")
            {
                this.printer++;
            }
            else if (x.DevType == "Server")
            {
                this.server++;
            }
        }
    }

}