@page "/piegraph";
@using IT_Inventory_Project.Data
@using MudBlazor
@using Newtonsoft.Json
@using System.Collections
@inject HttpClient Http;

<p>Pie Graph</p>

<MudPaper Class="pa-4">
    
    <MudChip Color="Color.Primary">Laptop : @laptop_desktop</MudChip>
    <MudChip Color="Color.Secondary">Server : @server</MudChip>
    <MudChip Color="Color.Info">Misc : @misc</MudChip>
    <MudChip Color="Color.Success">Polycom : @polycom</MudChip>
    <MudChip Color="Color.Warning">Phone : @phone</MudChip>
    <MudChip Color="Color.Error">Monitor : @monitor</MudChip>
    <MudChip Color="Color.Dark">Printer : @printer</MudChip>

    <MudChart ChartType="ChartType.Pie" InputData="@deviceCounts"
              @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
</MudPaper>
<MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>

@code
{
    public List<Device_GetAll> GetAll = new List<Device_GetAll>();

    public async Task GetAllData()
    {
        var tokenKey = new[]
        {
                    new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521")
        };

        string Device_AddUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_GetAll";
        var httpResponse = await Http.PostAsync(Device_AddUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse AddDataResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            GetAll = JsonConvert.DeserializeObject<List<Device_GetAll>>(AddDataResponse.Data);
        }
    }

    double[] deviceCounts;

    public int server = 0;
    public int misc = 0;
    public int polycom = 0;
    public int laptop_desktop = 0;
    public int phone = 0;
    public int monitor = 0;
    public int printer = 0;

    private int Index = -1;
    string[] labels = { "Laptop/Desktop", "Misc", "Mobile/Phone", "Monitor", "Polycom", "Printer", "Server" };

    protected override async Task OnInitializedAsync()
    {
        await GetAllData();
        await GetChartDetails();
        deviceCounts = new double[] { server, misc, polycom, laptop_desktop, phone, monitor, printer };
    }

    // Initialize counts for laptop, server, misc, polycom
    public async Task GetChartDetails()
    {
        foreach (var x in GetAll)
        {
            if (x.DevType == "Laptop/Desktop")
            {
                this.laptop_desktop++;
            }
            else if (x.DevType == "Misc")
            {
                this.misc++;
            }
            else if (x.DevType == "Mobile/Phone")
            {
                this.phone++;
            }
            else if (x.DevType == "Monitor")
            {
                this.monitor++;
            }
            else if (x.DevType == "Polycom")
            {
                this.polycom++;
            }
            else if (x.DevType == "Printer")
            {
                this.printer++;
            }
            else if (x.DevType == "Server")
            {
                this.server++;
            }
        }
    }

}



