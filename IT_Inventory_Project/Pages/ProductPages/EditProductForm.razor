@page "/product/{DevId}";
@using IT_Inventory_Project.Data
@using Newtonsoft.Json
@inject HttpClient Http;
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager navigate;
@inject IJSRuntime JSRuntime;

<div class="container">

    <h3 class="card-title text-primary">Edit Page</h3>

    <hr />

    <EditForm Model="@GetDataFromID" OnValidSubmit="UpdateFunction">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Token</label>
            <input class="form-control" placeholder="Token"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.token">
            </input>
            <ValidationMessage For="()=>GetDataFromID.token"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device ID</label>
            <input disabled class="form-control" placeholder="Dev ID"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.DevId">
            </input>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Type</label>
            <div>
                <InputSelect class="form-control" placeholder="Device Type"
                             aria-describedby="basic-addon1" @bind-Value="@GetDataFromID.DevType">
                    @foreach (var option in DeviceOptions)
                    {
                        <option value="@option.OptionValue">@option.OptionName</option>
                    }
                </InputSelect>
                <ValidationMessage For="()=>GetDataFromID.DevType"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Type Other</label>
            <input disabled class="form-control" placeholder="Dev ID"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.DevTypeOther">
            </input>
            <ValidationMessage For="()=>GetDataFromID.DevTypeOther"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Make</label>
            <input class="form-control" placeholder="Device Make"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Make">
            </input>
            <ValidationMessage For="()=>GetDataFromID.Make"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Model</label>
                <input class="form-control" placeholder="Device Model"
                       aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Model">
                </input>
                <ValidationMessage For="()=>GetDataFromID.Model"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Owner</label>
                <input class="form-control" placeholder="Device Owner"
                       aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Owner">
                </input>
                <ValidationMessage For="()=>GetDataFromID.Owner"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Location</label>
            <input class="form-control" placeholder="Device Location"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Location">
            </input>
            <ValidationMessage For="()=>GetDataFromID.Location"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Serial</label>
            <input class="form-control" placeholder="Device Serial"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Serial">
            </input>
            <ValidationMessage For="()=>GetDataFromID.Serial"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Purchase Date</label>
            <div id="purchaseDate">
                <InputDate class="form-control" placeholder="Device Purchase Date"
                       aria-describedby="basic-addon1" @bind-Value="@GetDataFromID.PurchaseDate">
                </InputDate>
                <ValidationMessage For="()=>GetDataFromID.PurchaseDate"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Warranty Expiry Date</label>
            <div>
                <InputDate class="form-control" placeholder="Device Warranty Exp. Date"
                           aria-describedby="basic-addon1" @bind-Value="@GetDataFromID.WarrantyExpDate"></InputDate>
                <ValidationMessage For="()=>GetDataFromID.WarrantyExpDate"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Service Expiry Date</label>
            <div>
                <InputDate class="form-control" placeholder="Device Service Exp. Date"
                           aria-describedby="basic-addon1" @bind-Value="@GetDataFromID.ServiceExpDate"></InputDate>
                <ValidationMessage For="()=>GetDataFromID.ServiceExpDate"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Value</label>
            <input class="form-control" placeholder="Device Value"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Value">
            </input>
            <ValidationMessage For="()=>GetDataFromID.Value"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Size</label>
            <input class="form-control" placeholder="Device Size"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Size"></input>
            <ValidationMessage For="()=>GetDataFromID.Size"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device Toner</label>
            <input class="form-control" placeholder="Device Toner"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.Toner"></input>
            <ValidationMessage For="()=>GetDataFromID.Toner"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device MacAddress</label>
            <input class="form-control" placeholder="Device MAC Address"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.MacAddress">
            </input>
            <ValidationMessage For="()=>GetDataFromID.MacAddress"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device IPAddress</label>
            <input class="form-control" placeholder="Device IP Address"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.IPAddress">
            </input>
            <ValidationMessage For="()=>GetDataFromID.IPAddress"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Device CellNumber</label>
            <input class="form-control" placeholder="Device Cell Number"
                   aria-describedby="basic-addon1" @bind-value="@GetDataFromID.CellNumber">
            </input>
            <ValidationMessage For="()=>GetDataFromID.CellNumber"></ValidationMessage>
        </div>

        <div class="form-group py-2" id="footer-buttons">
            <button type="submit" class="btn btn-warning">Update Data</button>
            <button type="button" class="btn btn-danger" @onclick="@(()=>showDelete(GetDataFromID.DevId))">Delete Data</button>
            <a href="/" class="btn btn-secondary" id="goBack">Go Back</a>
        </div>

    </EditForm>

    @if (Show)
    {
        <div class="modal" tabindextabindex="-1" style="display:block;background:rgba(205,205,205,0.5);" role="dialog">
            <div class="modal-dialog modal-xl modal-dialog-scrollable" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Delete</h4>
                    </div>

                    <div class="modal-body">
                        <span>Are you sure you want to delete the record</span>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="ClosePopUp">No</button>
                        <button type="button" class="btn btn-danger" @onclick="()=>Confirmation(true)">Yes</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    public void showDelete(string DevID)
    {
        DevID = DevId;
        Show = true;
    }

    public bool Show = false;

    [Parameter]
    public string DevId { get; set; }

    Device_Upd GetAll = new Device_Upd();
    Device_Upd GetDataFromID = new Device_Upd();

    public async Task Confirmation(bool value)
    {
        Show = false;
        var tokenKey = new[]
        {
            new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521"),
            new KeyValuePair<string, string>("DevId",DevId.ToString())
    };

        string deleteApi = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_Del";

        var httpResponse = await Http.PostAsync(deleteApi, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse inventoryAPIResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            await Task.Run(() => JSRuntime.InvokeVoidAsync("alert", $"'{inventoryAPIResponse.Data}'"));
            navigate.NavigateTo("/", true);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await GetDataById();
    }

    public async Task GetDataById()
    {
        var token1 = new[]
        {
            new KeyValuePair<string,string>("token","A12F7A58-842D-4111-A44D-5F8C4E1AA521"),
            new KeyValuePair<string,string>("DevId",DevId)
    };
        string URL = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_Get";
        var DeviceGetResponse = await Http.PostAsync(URL, new FormUrlEncodedContent(token1));

        if (DeviceGetResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse res = JsonConvert.DeserializeObject<InventoryAPIResponse>(await DeviceGetResponse.Content.ReadAsStringAsync());
            GetDataFromID = JsonConvert.DeserializeObject<Device_Upd>(res.Data);
        }
    }

    public async Task UpdateFunction()
    {
        var tokenKey = new[]
      {
            new KeyValuePair<string, string>("token",GetDataFromID.token),
            new KeyValuePair<string, string>("DevId",GetDataFromID.DevId),
            new KeyValuePair<string, string>("DevType",GetDataFromID.DevType),
            new KeyValuePair<string, string>("DevTypeOther",GetDataFromID.DevTypeOther),
            new KeyValuePair<string, string>("Make",GetDataFromID.Make),
            new KeyValuePair<string, string>("Model",GetDataFromID.Model),
            new KeyValuePair<string, string>("Owner",GetDataFromID.Owner),
            new KeyValuePair<string, string>("Location",GetDataFromID.Location),
            new KeyValuePair<string, string>("Serial",GetDataFromID.Serial),
            new KeyValuePair<string, string>("PurchaseDate",GetDataFromID.PurchaseDate.ToString("MM/dd/yyyy HH:mm:ss")),
            new KeyValuePair<string, string>("WarrantyExpDate",GetDataFromID.WarrantyExpDate.ToString("MM/dd/yyyy HH:mm:ss")),
            new KeyValuePair<string, string>("ServiceExpDate",GetDataFromID.ServiceExpDate.ToString("MM/dd/yyyy HH:mm:ss")),
            new KeyValuePair<string, string>("Value",GetDataFromID.Value),
            new KeyValuePair<string, string>("Size",GetDataFromID.Size),
            new KeyValuePair<string, string>("Toner",GetDataFromID.Toner),
            new KeyValuePair<string, string>("MacAddress",GetDataFromID.MacAddress),
            new KeyValuePair<string, string>("IPAddress",GetDataFromID.IPAddress),
            new KeyValuePair<string, string>("CellNumber",GetDataFromID.CellNumber),
     };

        string Device_AddUrl = "https://tools.brandinstitute.com/wsInventory/wsInventory.asmx/Device_Upd";
        var httpResponse = await Http.PostAsync(Device_AddUrl, new FormUrlEncodedContent(tokenKey));

        if (httpResponse.IsSuccessStatusCode)
        {
            InventoryAPIResponse AddDataResponse = JsonConvert.DeserializeObject<InventoryAPIResponse>(await httpResponse.Content.ReadAsStringAsync());
            GetAll = JsonConvert.DeserializeObject<Device_Upd>(AddDataResponse.Data);
            await Task.Run(() => JSRuntime.InvokeVoidAsync("alert", $"'{AddDataResponse.Data}'"));
            Console.WriteLine(AddDataResponse.Data);
            navigate.NavigateTo("/", true);
        }
    }

    List<DeviceTypeOptions> DeviceOptions = new List<DeviceTypeOptions>()
    {
        new DeviceTypeOptions() {  OptionName = "Select...", OptionValue = " " },
        new DeviceTypeOptions() {  OptionName = "Laptop/Desktop", OptionValue = "Laptop/Desktop" },
        new DeviceTypeOptions() {  OptionName = "Misc", OptionValue = "Misc" },
        new DeviceTypeOptions() {  OptionName = "Mobile Phone", OptionValue = "Mobile Phone" },
        new DeviceTypeOptions() {  OptionName = "Monitor", OptionValue = "Monitor" },
        new DeviceTypeOptions() {  OptionName = "Polycom", OptionValue = "Polycom" },
        new DeviceTypeOptions() {  OptionName = "Printer", OptionValue = "Printer" },
        new DeviceTypeOptions() {  OptionName = "Server", OptionValue = "Server" },
    };

    public void ClosePopUp()
    {
        Show = false;
    }

}